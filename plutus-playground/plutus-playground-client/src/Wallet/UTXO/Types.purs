-- File auto generated by purescript-bridge! --
module Wallet.UTXO.Types where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

newtype Tx =
    Tx {
      txInputs :: Array (TxIn String)
    , txOutputs :: Array (TxOut String)
    , txForge :: Value
    , txFee :: Value
    , txSignatures :: Array Signature
    }

derive instance genericTx :: Generic Tx
derive instance newtypeTx :: Newtype Tx _

--------------------------------------------------------------------------------
_Tx :: Iso' Tx { txInputs :: Array (TxIn String), txOutputs :: Array (TxOut String), txForge :: Value, txFee :: Value, txSignatures :: Array Signature}
_Tx = _Newtype

--------------------------------------------------------------------------------
newtype TxIn a =
    TxIn {
      txInRef :: TxOutRef a
    , txInType :: TxInType
    }

derive instance genericTxIn :: Generic a => Generic (TxIn a)
derive instance newtypeTxIn :: Newtype (TxIn a) _

--------------------------------------------------------------------------------
_TxIn :: forall a. Iso' (TxIn a) { txInRef :: TxOutRef a, txInType :: TxInType}
_TxIn = _Newtype

--------------------------------------------------------------------------------
newtype TxOutRef a =
    TxOutRef {
      txOutRefId :: TxId a
    , txOutRefIdx :: Int
    }

derive instance genericTxOutRef :: Generic a => Generic (TxOutRef a)
derive instance newtypeTxOutRef :: Newtype (TxOutRef a) _

--------------------------------------------------------------------------------
_TxOutRef :: forall a. Iso' (TxOutRef a) { txOutRefId :: TxId a, txOutRefIdx :: Int}
_TxOutRef = _Newtype

--------------------------------------------------------------------------------
data TxOutType =
    PayToScript String
  | PayToPubKey PubKey

derive instance genericTxOutType :: Generic TxOutType

--------------------------------------------------------------------------------
_PayToScript :: Prism' TxOutType String
_PayToScript = prism' PayToScript f
  where
    f (PayToScript a) = Just $ a
    f _ = Nothing

_PayToPubKey :: Prism' TxOutType PubKey
_PayToPubKey = prism' PayToPubKey f
  where
    f (PayToPubKey a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype TxOut a =
    TxOut {
      txOutAddress :: Address a
    , txOutValue :: Value
    , txOutType :: TxOutType
    }

derive instance genericTxOut :: Generic a => Generic (TxOut a)
derive instance newtypeTxOut :: Newtype (TxOut a) _

--------------------------------------------------------------------------------
_TxOut :: forall a. Iso' (TxOut a) { txOutAddress :: Address a, txOutValue :: Value, txOutType :: TxOutType}
_TxOut = _Newtype

--------------------------------------------------------------------------------
newtype TxId a =
    TxId {
      getTxId :: a
    }

derive instance genericTxId :: Generic a => Generic (TxId a)
derive instance newtypeTxId :: Newtype (TxId a) _

--------------------------------------------------------------------------------
_TxId :: forall a. Iso' (TxId a) { getTxId :: a}
_TxId = _Newtype

--------------------------------------------------------------------------------
data TxInType =
    ConsumeScriptAddress String String
  | ConsumePublicKeyAddress Signature

derive instance genericTxInType :: Generic TxInType

--------------------------------------------------------------------------------
_ConsumeScriptAddress :: Prism' TxInType { a :: String, b :: String }
_ConsumeScriptAddress = prism' (\{ a, b } -> ConsumeScriptAddress a b) f
  where
    f (ConsumeScriptAddress a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ConsumePublicKeyAddress :: Prism' TxInType Signature
_ConsumePublicKeyAddress = prism' ConsumePublicKeyAddress f
  where
    f (ConsumePublicKeyAddress a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Signature =
    Signature {
      getSignature :: Int
    }

derive instance genericSignature :: Generic Signature
derive instance newtypeSignature :: Newtype Signature _

--------------------------------------------------------------------------------
_Signature :: Iso' Signature { getSignature :: Int}
_Signature = _Newtype

--------------------------------------------------------------------------------
newtype Value =
    Value {
      getValue :: Int
    }

derive instance genericValue :: Generic Value
derive instance newtypeValue :: Newtype Value _

--------------------------------------------------------------------------------
_Value :: Iso' Value { getValue :: Int}
_Value = _Newtype

--------------------------------------------------------------------------------
newtype PubKey =
    PubKey {
      getPubKey :: Int
    }

derive instance genericPubKey :: Generic PubKey
derive instance newtypePubKey :: Newtype PubKey _

--------------------------------------------------------------------------------
_PubKey :: Iso' PubKey { getPubKey :: Int}
_PubKey = _Newtype

--------------------------------------------------------------------------------
newtype Address a =
    Address {
      getAddress :: a
    }

derive instance genericAddress :: Generic a => Generic (Address a)
derive instance newtypeAddress :: Newtype (Address a) _

--------------------------------------------------------------------------------
_Address :: forall a. Iso' (Address a) { getAddress :: a}
_Address = _Newtype

--------------------------------------------------------------------------------
