-- File auto generated by purescript-bridge! --
module Playground.API where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.RawJson (RawJson)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import Prim (Array, Int, String)
import Wallet.Emulator.Types (Wallet)
import Wallet.UTXO.Types (Tx)

import Prelude
import Data.Generic (class Generic)

data SimpleArgumentSchema =
    SimpleIntArgument
  | SimpleStringArgument
  | SimpleObjectArgument (Array (Tuple String SimpleArgumentSchema))
  | UnknownArgument String

derive instance genericSimpleArgumentSchema :: Generic SimpleArgumentSchema

--------------------------------------------------------------------------------
_SimpleIntArgument :: Prism' SimpleArgumentSchema Unit
_SimpleIntArgument = prism' (\_ -> SimpleIntArgument) f
  where
    f SimpleIntArgument = Just unit
    f _ = Nothing

_SimpleStringArgument :: Prism' SimpleArgumentSchema Unit
_SimpleStringArgument = prism' (\_ -> SimpleStringArgument) f
  where
    f SimpleStringArgument = Just unit
    f _ = Nothing

_SimpleObjectArgument :: Prism' SimpleArgumentSchema (Array (Tuple String SimpleArgumentSchema))
_SimpleObjectArgument = prism' SimpleObjectArgument f
  where
    f (SimpleObjectArgument a) = Just $ a
    f _ = Nothing

_UnknownArgument :: Prism' SimpleArgumentSchema String
_UnknownArgument = prism' UnknownArgument f
  where
    f (UnknownArgument a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype FunctionSchema a =
    FunctionSchema {
      functionName :: Fn
    , argumentSchema :: Array a
    }

derive instance genericFunctionSchema :: Generic a => Generic (FunctionSchema a)
derive instance newtypeFunctionSchema :: Newtype (FunctionSchema a) _

--------------------------------------------------------------------------------
_FunctionSchema :: forall a. Iso' (FunctionSchema a) { functionName :: Fn, argumentSchema :: Array a}
_FunctionSchema = _Newtype

--------------------------------------------------------------------------------
newtype Fn =
    Fn String

derive instance genericFn :: Generic Fn
derive instance newtypeFn :: Newtype Fn _

--------------------------------------------------------------------------------
_Fn :: Iso' Fn String
_Fn = _Newtype
--------------------------------------------------------------------------------
newtype SourceCode =
    SourceCode String

derive instance genericSourceCode :: Generic SourceCode
derive instance newtypeSourceCode :: Newtype SourceCode _

--------------------------------------------------------------------------------
_SourceCode :: Iso' SourceCode String
_SourceCode = _Newtype
--------------------------------------------------------------------------------
data CompilationError =
    RawError String
  | CompilationError {
      filename :: String
    , row :: Int
    , column :: Int
    , text :: Array String
    }

derive instance genericCompilationError :: Generic CompilationError

--------------------------------------------------------------------------------
_RawError :: Prism' CompilationError String
_RawError = prism' RawError f
  where
    f (RawError a) = Just $ a
    f _ = Nothing

_CompilationError :: Prism' CompilationError { filename :: String, row :: Int, column :: Int, text :: Array String }
_CompilationError = prism' CompilationError f
  where
    f (CompilationError r) = Just r
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Expression =
    Expression {
      function :: Fn
    , wallet :: Wallet
    , arguments :: Array RawJson
    }

derive instance genericExpression :: Generic Expression
derive instance newtypeExpression :: Newtype Expression _

--------------------------------------------------------------------------------
_Expression :: Iso' Expression { function :: Fn, wallet :: Wallet, arguments :: Array RawJson}
_Expression = _Newtype

--------------------------------------------------------------------------------
newtype Evaluation =
    Evaluation {
      wallets :: Array (Tuple Wallet Int)
    , program :: Array Expression
    , sourceCode :: SourceCode
    , blockchain :: Array (Array Tx)
    }

derive instance genericEvaluation :: Generic Evaluation
derive instance newtypeEvaluation :: Newtype Evaluation _

--------------------------------------------------------------------------------
_Evaluation :: Iso' Evaluation { wallets :: Array (Tuple Wallet Int), program :: Array Expression, sourceCode :: SourceCode, blockchain :: Array (Array Tx)}
_Evaluation = _Newtype

--------------------------------------------------------------------------------
